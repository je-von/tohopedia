# directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @auth on FIELD_DEFINITION

scalar Date
scalar Any
type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  phone: String!
  gender: String!
  dob: Date!
  profilePic: String!
  role: String!
  isSuspended: Boolean!
  shop: Shop! @goField(forceResolver: true)
  carts: [Cart!]! @goField(forceResolver: true)
  addresses: [Address!]! @goField(forceResolver: true)
}

type AuthOps {
  login(email: String!, password: String!): Any! @goField(forceResolver: true)
  register(input: NewUser!): Any! @goField(forceResolver: true)
}

type Query {
  user(id: ID!): User! @goField(forceResolver: true)
  # user(id: ID, email: String, password: String): User!
  users: [User!]!
  # userGetByID(id: ID!): User!
  # userGetByEmail(email: String!): User!

  getCurrentUser: User! @goField(forceResolver: true) @auth
  protected: String! @goField(forceResolver: true) @auth
}

type Mutation {
  createUser(input: NewUser!): User!
  updateUser(input: NewUser!): User! @auth
  toggleSuspend(id: ID!): User! # block / unblock
  login(email: String!, password: String!): User!

  auth: AuthOps! @goField(forceResolver: true)
}

input NewUser {
  name: String!
  email: String!
  password: String!
  phone: String!
  gender: String!
  dob: Date!
  profilePic: String!
  role: String!
}
